specification {
    element actor {
        style {
            shape person
            color gray
        }
    }
    element system
    element microservice {
        style {
            color green
        }
    }
    element database {
        style {
            shape storage
            color green
            icon https://icons.terrastruct.com/aws%2FDatabase%2FAmazon-Aurora_light-bg.svg
        }
        technology 'AWS RDS Aurora PostgreSQL database'
    }
    element component
    element queue {
        style {
            shape queue
            color indigo
            icon https://icons.terrastruct.com/aws%2FApplication%20Integration%2FAmazon-Simple-Queue-Service-SQS_Queue_light-bg.svg
        }
        technology 'AWS SQS queue'
    }
    element storage {
        style {
            shape cylinder
            color indigo
            icon https://icons.terrastruct.com/aws%2FStorage%2FAmazon-Simple-Storage-Service-S3_Bucket_light-bg.svg
        }
        technology 'AWS S3 bucket'
    }
    element cache {
        style {
            shape cylinder
            color red
            icon https://icons.terrastruct.com/aws%2FDatabase%2FAmazon-ElastiCache_For-Redis_light-bg.svg
        }
        technology 'AWS ElastiCache Redis'
    }
}

model {
    developer = actor 'Developer' {
        description 'Planning application developer submitting applications and making payments'
    }
    lpaAgent = actor 'LPA Planning Agent' {
        description 'Local Planning Authority agent verifying planning applications'
    }
    nrfOperations = actor 'NRF Operations' {
        description 'Nature Restoration Fund operations team managing cases'
    }
    ssclAdmin = actor 'SSCL Finance Admin' {
        description 'Shared Service Centre Limited finance administrator processing invoices'
    }

    govUKNotify = system 'GOV.UK Notify' {
        description 'GOV.UK Notify service for sending email and SMS notifications'
        technology 'GOV.UK Platform as a Service'
        style {
            color secondary
        }
    }

    govUKPay = system 'GOV.UK Pay' {
        description 'GOV.UK Pay service for processing credit card payments via session redirect'
        technology 'GOV.UK Platform as a Service'
        style {
            color secondary
        }
    }

    SOP = system 'Shared Oracle Platform' {
        description 'DEFRA financial ERP system for invoice processing'
        technology 'Oracle Fusion ERP system'
        icon https://icons.terrastruct.com/dev%2Foracle.svg
        style {
            color red
        }
    }

    component sopFTPServer 'SOP FTP Server' {
        description 'FTP server for exchanging invoice and payment data with SOP'
        technology 'AWS Transfer for FTP'
        icon https://icons.terrastruct.com/aws%2FMigration%20&%20Transfer%2FAWS-Transfer-for-FTP_Resource-Icon_light-bg.svg
        style {
            color red
        }
    }

    customerBank = system 'Customer Bank' {
        description 'Customer banking system for paying invoices'
        technology 'Banking system'
        style {
            color red
        }
    }

    payForNRFService = system 'Pay for NRF Service' {
        description 'Complete Nature Restoration Fund service platform for processing planning applications and levy payments'
        style {
            color green
        }

        database postgresDatabase 'PostgreSQL Database' {
            description 'Central database storing planning applications, geospatial data, and assessment results'
        }

        nrfFrontendService = system 'NRF Frontend Service' {
            description 'User-facing web application for submitting planning applications and initiating payments'
            style {
                color green
            }

            microservice nrfFrontendService 'Frontend Service' {
                description 'Frontend application server handling user requests and orchestration'
                technology 'Node.js web service'
                icon https://icons.terrastruct.com/dev%2Fnodejs.svg
            }

            cache frontendRedisCache 'Frontend Redis Cache' {
                description 'Redis cache for session management and application data caching'
            }

            microservice cdpUploaderService 'CDP Uploader Service' {
                description 'Document upload service with virus scanning capabilities'
                technology 'Python file upload and scanning service'
                icon https://icons.terrastruct.com/dev%2Fpython.svg
                style {
                    color indigo
                }
            }

            storage tenantBucket 'Tenant Bucket' {
                description 'Secure storage for verified application documents'
            }

            storage quarantineBucket 'Quarantine Bucket' {
                description 'Temporary storage for documents awaiting virus scan'
            }

            component clamAVScanner 'ClamAV Scanner' {
                description 'Antivirus scanner for uploaded documents'
                technology 'ClamAV antivirus engine (containerized)'
                icon https://icons.terrastruct.com/dev%2Fpython.svg
                style {
                    color indigo
                }
            }

            developer -> nrfFrontendService 'Submits planning application details'
            nrfFrontendService -> govUKNotify 'Sends magic link for system access'
            govUKNotify -> developer 'Delivers magic link email'
            nrfFrontendService -> frontendRedisCache 'Caches user sessions and form data'
            nrfFrontendService -> cdpUploaderService 'Initiates file upload request'
            cdpUploaderService -> quarantineBucket 'Uploads file to quarantine'
            clamAVScanner -> cdpUploaderService 'Notifies scan outcome'
            cdpUploaderService -> tenantBucket 'Moves clean file to tenant bucket'
            cdpUploaderService -> quarantineBucket 'Deletes infected files'
            nrfFrontendService -> postgresDatabase 'Saves planning application details'
            nrfFrontendService -> impactAssessmentQueue 'Pushes application to queue for processing'
            nrfFrontendService -> govUKPay 'Redirects session for credit card payment (< Â£10k)'
            developer -> govUKPay 'Submits card details for payment'
        }

        nrfImpactAssessmentService = system 'Impact Assessment Service' {
            description 'Geospatial analysis service calculating NRF levy estimates based on biodiversity impact'
            style {
                color green
            }

            queue impactAssessmentQueue 'Impact Assessment Queue' {
                description 'Queue of planning applications awaiting impact assessment'
            }

            queue impactAssessmentDLQueue 'Impact Assessment DLQ' {
                description 'Dead letter queue for failed assessment messages'
            }

            microservice impactAssessmentWorker 'Impact Assessment Worker' {
                description 'Worker service processing geospatial calculations and generating levy estimates'
                technology 'Python worker service'
                icon https://icons.terrastruct.com/dev%2Fpython.svg
            }

            impactAssessmentWorker -> impactAssessmentQueue 'Polls for new applications'
            impactAssessmentWorker -> impactAssessmentDLQueue 'Sends failed messages to DLQ'
            impactAssessmentWorker -> postgresDatabase 'Reads geospatial and biodiversity data'
            impactAssessmentWorker -> postgresDatabase 'Saves assessment results and levy estimates'
            impactAssessmentWorker -> govUKNotify 'Sends NRF levy estimate notification'
            impactAssessmentWorker -> govUKNotify 'Sends payment request confirmation'
            govUKNotify -> developer 'Delivers levy estimate email'
            govUKNotify -> developer 'Delivers payment confirmation email'
        }

        nrfVerificationService = system 'Verification Service' {
            description 'LPA agent portal for reviewing and verifying planning application details'
            style {
                color green
            }

            microservice verificationService 'Verification Service' {
                description 'Verification portal for Local Planning Authority agents'
                technology 'Node.js web service'
                icon https://icons.terrastruct.com/dev%2Fnodejs.svg
            }

            cache verificationRedisCache 'Verification Redis Cache' {
                description 'Redis cache for session management and verification workflow caching'
            }

            lpaAgent -> verificationService 'Reviews and verifies planning applications'
            verificationService -> govUKNotify 'Sends magic link for system access'
            govUKNotify -> lpaAgent 'Delivers magic link email'
            verificationService -> verificationRedisCache 'Caches agent sessions and verification data'
            verificationService -> postgresDatabase 'Reads application details for verification'
        }

        nrfInvoiceRequestorService = system 'Invoice Requestor Service' {
            description 'Service generating invoices for all NRF levy payments and submitting to SOP for processing'
            style {
                color green
            }

            microservice invoiceRequestorService 'Invoice Requestor Service' {
                description 'Scheduled service for invoice generation and submission'
                technology 'Node.js scheduled service (EventBridge)'
                icon https://icons.terrastruct.com/dev%2Fnodejs.svg
            }

            invoiceRequestorService -> postgresDatabase 'Reads verified application data'
            invoiceRequestorService -> sopFTPServer 'Sends invoice and customer details via FTP'
            sopFTPServer -> SOP 'Transfers invoice data for processing'
            ssclAdmin -> SOP 'Processes and approves invoices'
            SOP -> developer 'Sends invoice (< Â£10k: with GOV.UK Pay link, > Â£10k: for bank transfer)'
        }

        nrfReconciliationService = system 'Reconciliation Service' {
            description 'Service reconciling bank transfer payments with invoices and completing applications'
            style {
                color green
            }

            microservice invoiceReconciliationService 'Invoice Reconciliation Service' {
                description 'Scheduled service for payment reconciliation and application completion'
                technology 'Node.js scheduled service (EventBridge)'
                icon https://icons.terrastruct.com/dev%2Fnodejs.svg
            }

            developer -> customerBank 'Pays invoice via bank transfer (> Â£10k)'
            SOP -> customerBank 'Retrieves bank statements'
            SOP -> sopFTPServer 'Exports transaction report via FTP'
            invoiceReconciliationService -> sopFTPServer 'Retrieves transaction report'
            invoiceReconciliationService -> postgresDatabase 'Saves reconciliation results'
            invoiceReconciliationService -> postgresDatabase 'Updates application status to Completed'
            invoiceReconciliationService -> govUKNotify 'Sends payment confirmation'
            govUKNotify -> developer 'Delivers payment confirmation email'
        }

        nrfCaseManagementService = system 'Case Management Service' {
            description 'Operations portal for managing NRF cases, disputes, and exceptions'
            style {
                color green
            }

            microservice caseManagementService 'Case Management Service' {
                description 'Case management portal for NRF operations team'
                technology 'Node.js web service'
                icon https://icons.terrastruct.com/dev%2Fnodejs.svg
            }

            cache caseManagementRedisCache 'Case Management Redis Cache' {
                description 'Redis cache for session management and case data caching'
            }

            nrfOperations -> caseManagementService 'Manages cases, disputes, and exceptions'
            caseManagementService -> caseManagementRedisCache 'Caches operator sessions and case data'
            caseManagementService -> postgresDatabase 'Reads application and case data'
            caseManagementService -> postgresDatabase 'Updates case management records'
            caseManagementService -> govUKNotify 'Sends case notifications'
            govUKNotify -> developer 'Delivers case update emails'
        }
    }
}

views {
    view systemContext {
        title 'NRF System Context'
        description 'High-level view showing key actors, NRF platform, and external system integrations'
        include
            developer,
            lpaAgent,
            nrfOperations,
            ssclAdmin,
            payForNRFService,
            govUKNotify,
            govUKPay,
            SOP,
            sopFTPServer,
            customerBank,
            developer -> *,
            lpaAgent -> *,
            nrfOperations -> *,
            ssclAdmin -> *,
            payForNRFService -> *,
            sopFTPServer -> *,
            SOP -> *
    }

    view index {
        title 'NRF Complete System Overview'
        description 'Complete system architecture showing all services, actors, and integrations'
        include *
    }

    view frontendService {
        title 'NRF Frontend Service'
        description 'Developer-facing service for application submission, magic link authentication, file upload, and payment initiation'
        include developer, nrfFrontendService.*, postgresDatabase, nrfImpactAssessmentService.impactAssessmentQueue, govUKNotify, govUKPay
    }

    view impactAssessmentService {
        title 'NRF Impact Assessment Service'
        description 'Geospatial analysis and levy calculation service with notification workflow'
        include nrfImpactAssessmentService.*, nrfFrontendService.nrfFrontendService, postgresDatabase, govUKNotify, developer
    }

    view verificationService {
        title 'NRF Verification Service'
        description 'LPA agent portal for application verification and approval with magic link authentication'
        include lpaAgent, nrfVerificationService.*, postgresDatabase, govUKNotify
    }

    view invoiceRequestorService {
        title 'NRF Invoice Requestor Service'
        description 'Invoice generation and submission to SOP for all NRF levy payments'
        include nrfInvoiceRequestorService.*, postgresDatabase, sopFTPServer, SOP, ssclAdmin, developer
    }

    view invoiceReconciliationService {
        title 'NRF Invoice Reconciliation Service'
        description 'Bank transfer payment reconciliation and application completion workflow'
        include nrfReconciliationService.*, postgresDatabase, sopFTPServer, SOP, developer, customerBank, govUKNotify
    }

    view caseManagementService {
        title 'NRF Case Management Service'
        description 'Operations portal for managing cases, disputes, and exceptions'
        include nrfCaseManagementService.*, nrfOperations, postgresDatabase, govUKNotify, developer
    }

    // Dynamic Views (Sequence Diagrams)

    dynamic view applicationSubmission {
        title 'Application Submission Flow'
        description 'Developer submits planning application - all applications follow the same submission process'

        developer -> nrfFrontendService.nrfFrontendService 'Submits planning application'
        nrfFrontendService.nrfFrontendService -> govUKNotify 'Sends magic link for authentication'
        govUKNotify -> developer 'Delivers magic link email'
        developer -> nrfFrontendService.nrfFrontendService 'Accesses system via magic link'
        nrfFrontendService.nrfFrontendService -> nrfFrontendService.frontendRedisCache 'Caches user session'
        nrfFrontendService.nrfFrontendService -> payForNRFService.postgresDatabase 'Saves application details'
        developer -> nrfFrontendService.nrfFrontendService 'Uploads supporting documents'
        nrfFrontendService.nrfFrontendService -> nrfFrontendService.cdpUploaderService 'Initiates file upload'
        nrfFrontendService.cdpUploaderService -> nrfFrontendService.quarantineBucket 'Uploads file to quarantine'
        nrfFrontendService.clamAVScanner -> nrfFrontendService.cdpUploaderService 'Returns virus scan result'
        nrfFrontendService.cdpUploaderService -> nrfFrontendService.tenantBucket 'Moves clean file to tenant bucket'
        nrfFrontendService.cdpUploaderService -> nrfFrontendService.nrfFrontendService 'Confirms upload success'
        nrfFrontendService.nrfFrontendService -> payForNRFService.postgresDatabase 'Saves application with file references'
        nrfFrontendService.nrfFrontendService -> nrfImpactAssessmentService.impactAssessmentQueue 'Pushes application for assessment'
        nrfFrontendService.nrfFrontendService -> developer 'Application submitted (invoice will be sent after verification)'
    }

    dynamic view impactAssessmentProcessing {
        title 'Impact Assessment Processing Flow'
        description 'Worker processes geospatial analysis and generates NRF levy estimate'

        nrfFrontendService.nrfFrontendService -> nrfImpactAssessmentService.impactAssessmentQueue 'Pushes application for assessment'
        nrfImpactAssessmentService.impactAssessmentWorker -> nrfImpactAssessmentService.impactAssessmentQueue 'Polls for new applications'
        nrfImpactAssessmentService.impactAssessmentQueue -> nrfImpactAssessmentService.impactAssessmentWorker 'Returns application message'
        nrfImpactAssessmentService.impactAssessmentWorker -> payForNRFService.postgresDatabase 'Reads geospatial and biodiversity data'
        nrfImpactAssessmentService.impactAssessmentWorker -> payForNRFService.postgresDatabase 'Saves assessment results and levy estimate'
        nrfImpactAssessmentService.impactAssessmentWorker -> govUKNotify 'Sends levy estimate notification'
        govUKNotify -> developer 'Delivers levy estimate email'
        nrfImpactAssessmentService.impactAssessmentWorker -> govUKNotify 'Sends payment request confirmation'
        govUKNotify -> developer 'Delivers payment confirmation email'
    }

    dynamic view lpaVerification {
        title 'LPA Agent Verification Flow'
        description 'LPA agent verifies planning application details'

        lpaAgent -> nrfVerificationService.verificationService 'Requests access to verify applications'
        nrfVerificationService.verificationService -> govUKNotify 'Sends magic link'
        govUKNotify -> lpaAgent 'Delivers magic link email'
        lpaAgent -> nrfVerificationService.verificationService 'Accesses system via magic link'
        nrfVerificationService.verificationService -> nrfVerificationService.verificationRedisCache 'Caches agent session'
        lpaAgent -> nrfVerificationService.verificationService 'Requests application list'
        nrfVerificationService.verificationService -> payForNRFService.postgresDatabase 'Queries pending applications'
        payForNRFService.postgresDatabase -> nrfVerificationService.verificationService 'Returns application data'
        nrfVerificationService.verificationService -> lpaAgent 'Displays pending applications'
        lpaAgent -> nrfVerificationService.verificationService 'Selects application to review'
        nrfVerificationService.verificationService -> payForNRFService.postgresDatabase 'Reads complete application details'
        payForNRFService.postgresDatabase -> nrfVerificationService.verificationService 'Returns application data'
        nrfVerificationService.verificationService -> lpaAgent 'Displays application for review'
        lpaAgent -> nrfVerificationService.verificationService 'Verifies and approves application'
        nrfVerificationService.verificationService -> payForNRFService.postgresDatabase 'Updates application verification status'
        nrfVerificationService.verificationService -> lpaAgent 'Confirmation of verification'
    }

    dynamic view invoiceGeneration {
        title 'Invoice Generation and Submission Flow'
        description 'Scheduled service generates invoices and submits to SOP - all applications receive invoices'

        nrfInvoiceRequestorService.invoiceRequestorService -> payForNRFService.postgresDatabase 'Queries verified applications requiring invoices'
        payForNRFService.postgresDatabase -> nrfInvoiceRequestorService.invoiceRequestorService 'Returns application data'
        nrfInvoiceRequestorService.invoiceRequestorService -> sopFTPServer 'Sends invoice and customer details via FTP'
        sopFTPServer -> SOP 'Transfers invoice data for processing'
        nrfInvoiceRequestorService.invoiceRequestorService -> payForNRFService.postgresDatabase 'Marks invoice as submitted'
        ssclAdmin -> SOP 'Reviews and approves invoices'
        SOP -> developer 'Sends invoice with GOV.UK Pay link (< Â£10k) or bank details (> Â£10k)'
    }

    dynamic view paymentReconciliation {
        title 'Payment Reconciliation Flow'
        description 'Bank transfer payments reconciled with invoices (> Â£10k)'

        developer -> customerBank 'Pays invoice via bank transfer'
        customerBank -> SOP 'Bank statement data'
        SOP -> sopFTPServer 'Exports transaction report via FTP'
        nrfReconciliationService.invoiceReconciliationService -> sopFTPServer 'Retrieves transaction report'
        sopFTPServer -> nrfReconciliationService.invoiceReconciliationService 'Returns payment data'
        nrfReconciliationService.invoiceReconciliationService -> payForNRFService.postgresDatabase 'Finds matching application'
        nrfReconciliationService.invoiceReconciliationService -> payForNRFService.postgresDatabase 'Saves reconciliation result'
        nrfReconciliationService.invoiceReconciliationService -> payForNRFService.postgresDatabase 'Updates application status to Completed'
        nrfReconciliationService.invoiceReconciliationService -> govUKNotify 'Sends payment confirmation'
        govUKNotify -> developer 'Delivers payment confirmation email'
    }

    dynamic view paymentCreditCard {
        title 'Payment Flow - Credit Card via GOV.UK Pay'
        description 'Developer pays NRF levy via credit card (< Â£10k) using GOV.UK Pay link in invoice'
        
        // Invoice generated and sent by SOP (see invoiceGeneration flow)
        SOP -> developer 'Sends invoice with GOV.UK Pay link (< Â£10k)'
        developer -> govUKPay 'Clicks link and enters card details'
        govUKPay -> developer 'Payment confirmation page'
        govUKPay -> nrfFrontendService.nrfFrontendService 'Webhook: Payment confirmed'
        nrfFrontendService.nrfFrontendService -> payForNRFService.postgresDatabase 'Updates payment and application status to Completed'
        nrfFrontendService.nrfFrontendService -> govUKNotify 'Sends payment confirmation'
        govUKNotify -> developer 'Delivers payment confirmation email'
    }

    dynamic view paymentBankTransfer {
        title 'Payment Flow - Bank Transfer'
        description 'Developer pays NRF levy via BACS bank transfer (> Â£10k) - reconciled by scheduled service'
        
        // Invoice generated and sent by SOP (see invoiceGeneration flow)
        SOP -> developer 'Sends invoice with bank details (> Â£10k)'
        developer -> customerBank 'Pays invoice via BACS bank transfer'
        customerBank -> SOP 'Bank statement data transferred'
        SOP -> sopFTPServer 'Exports transaction report via FTP'
        
        // Reconciliation service runs on schedule (see paymentReconciliation flow)
        nrfReconciliationService.invoiceReconciliationService -> sopFTPServer 'Retrieves transaction report'
        nrfReconciliationService.invoiceReconciliationService -> payForNRFService.postgresDatabase 'Matches payment to application'
        nrfReconciliationService.invoiceReconciliationService -> payForNRFService.postgresDatabase 'Updates application status to Completed'
        nrfReconciliationService.invoiceReconciliationService -> govUKNotify 'Sends payment confirmation'
        govUKNotify -> developer 'Delivers payment confirmation email'
    }

    dynamic view caseManagement {
        title 'Case Management Flow'
        description 'NRF operations team manages cases, disputes, and exceptions'

        nrfOperations -> nrfCaseManagementService.caseManagementService 'Accesses operations portal'
        nrfCaseManagementService.caseManagementService -> nrfCaseManagementService.caseManagementRedisCache 'Caches operator session'
        nrfOperations -> nrfCaseManagementService.caseManagementService 'Views dashboard'
        nrfCaseManagementService.caseManagementService -> payForNRFService.postgresDatabase 'Queries cases, disputes, and exceptions'
        payForNRFService.postgresDatabase -> nrfCaseManagementService.caseManagementService 'Returns case data'
        nrfCaseManagementService.caseManagementService -> nrfOperations 'Displays dashboard'
        nrfOperations -> nrfCaseManagementService.caseManagementService 'Selects and updates case'
        nrfCaseManagementService.caseManagementService -> payForNRFService.postgresDatabase 'Updates case record'
        nrfCaseManagementService.caseManagementService -> govUKNotify 'Sends case update notification'
        govUKNotify -> developer 'Delivers case update email'
    }

    dynamic view endToEndFlowCreditCard {
        title 'Complete End-to-End Flow - Credit Card Payment'
        description 'Application submission through to credit card payment confirmation (< Â£10k)'
        
        // Application Submission
        developer -> nrfFrontendService.nrfFrontendService 'Submits application and uploads files'
        nrfFrontendService.nrfFrontendService -> payForNRFService.postgresDatabase 'Saves application'
        nrfFrontendService.nrfFrontendService -> nrfImpactAssessmentService.impactAssessmentQueue 'Queues for assessment'
        
        // Impact Assessment
        nrfImpactAssessmentService.impactAssessmentWorker -> payForNRFService.postgresDatabase 'Reads application and calculates levy'
        nrfImpactAssessmentService.impactAssessmentWorker -> payForNRFService.postgresDatabase 'Saves assessment results'
        nrfImpactAssessmentService.impactAssessmentWorker -> govUKNotify 'Sends levy estimate'
        govUKNotify -> developer 'Levy estimate email'
        
        // LPA Verification
        lpaAgent -> nrfVerificationService.verificationService 'Accesses verification portal'
        nrfVerificationService.verificationService -> payForNRFService.postgresDatabase 'Reads application'
        lpaAgent -> nrfVerificationService.verificationService 'Verifies application'
        nrfVerificationService.verificationService -> payForNRFService.postgresDatabase 'Updates verification status'
        
        // Invoice Generation
        nrfInvoiceRequestorService.invoiceRequestorService -> payForNRFService.postgresDatabase 'Queries verified applications'
        nrfInvoiceRequestorService.invoiceRequestorService -> SOP 'Submits invoice via FTP'
        ssclAdmin -> SOP 'Approves invoice'
        SOP -> developer 'Sends invoice with GOV.UK Pay link (< Â£10k)'
        
        // Payment via Credit Card
        developer -> govUKPay 'Clicks link in invoice and pays via card'
        govUKPay -> nrfFrontendService.nrfFrontendService 'Payment webhook'
        nrfFrontendService.nrfFrontendService -> payForNRFService.postgresDatabase 'Updates status to Completed'
        nrfFrontendService.nrfFrontendService -> govUKNotify 'Sends payment confirmation'
        govUKNotify -> developer 'Payment confirmation email'
    }

    dynamic view endToEndFlowBankTransfer {
        title 'Complete End-to-End Flow - Bank Transfer Payment'
        description 'Application submission through to bank transfer payment confirmation (> Â£10k)'
        
        // Application Submission
        developer -> nrfFrontendService.nrfFrontendService 'Submits application and uploads files'
        nrfFrontendService.nrfFrontendService -> payForNRFService.postgresDatabase 'Saves application'
        nrfFrontendService.nrfFrontendService -> nrfImpactAssessmentService.impactAssessmentQueue 'Queues for assessment'
        
        // Impact Assessment
        nrfImpactAssessmentService.impactAssessmentWorker -> payForNRFService.postgresDatabase 'Reads application and calculates levy'
        nrfImpactAssessmentService.impactAssessmentWorker -> payForNRFService.postgresDatabase 'Saves assessment results'
        nrfImpactAssessmentService.impactAssessmentWorker -> govUKNotify 'Sends levy estimate'
        govUKNotify -> developer 'Levy estimate email'
        
        // LPA Verification
        lpaAgent -> nrfVerificationService.verificationService 'Accesses verification portal'
        nrfVerificationService.verificationService -> payForNRFService.postgresDatabase 'Reads application'
        lpaAgent -> nrfVerificationService.verificationService 'Verifies application'
        nrfVerificationService.verificationService -> payForNRFService.postgresDatabase 'Updates verification status'
        
        // Invoice Generation
        nrfInvoiceRequestorService.invoiceRequestorService -> payForNRFService.postgresDatabase 'Queries verified applications'
        nrfInvoiceRequestorService.invoiceRequestorService -> SOP 'Submits invoice via FTP'
        ssclAdmin -> SOP 'Approves invoice'
        SOP -> developer 'Sends invoice with bank details (> Â£10k)'
        
        // Payment via Bank Transfer
        developer -> customerBank 'Pays via BACS bank transfer'
        SOP -> sopFTPServer 'Exports transaction report'
        nrfReconciliationService.invoiceReconciliationService -> sopFTPServer 'Retrieves payment data'
        nrfReconciliationService.invoiceReconciliationService -> payForNRFService.postgresDatabase 'Updates status to Completed'
        nrfReconciliationService.invoiceReconciliationService -> govUKNotify 'Sends payment confirmation'
        govUKNotify -> developer 'Payment confirmation email'
    }
}
