specification {
    element actor {
        style {
            shape person
            color gray
        }
    }
    element system
    element microservice {
        style {
            color green
        }
    }
    element database {
        style {
            shape storage
            color green
            icon https://icons.terrastruct.com/aws%2FDatabase%2FAmazon-Aurora_light-bg.svg
        }
        technology 'AWS RDS Aurora PostgreSQL database'
    }
    element component
    element queue {
        style {
            shape queue
            color indigo
            icon https://icons.terrastruct.com/aws%2FApplication%20Integration%2FAmazon-Simple-Queue-Service-SQS_Queue_light-bg.svg
        }
        technology 'AWS SQS queue'
    }
    element storage {
        style {
            shape cylinder
            color indigo
            icon https://icons.terrastruct.com/aws%2FStorage%2FAmazon-Simple-Storage-Service-S3_Bucket_light-bg.svg
        }
        technology 'AWS S3 bucket'
    }
    element cache {
        style {
            shape cylinder
            color red
            icon https://icons.terrastruct.com/aws%2FDatabase%2FAmazon-ElastiCache_For-Redis_light-bg.svg
        }
        technology 'AWS ElastiCache Redis'
    }
}

model {
    developer = actor 'Developer' {
        description 'Planning application developer submitting applications and making payments'
    }
    lpaAgent = actor 'LPA Planning Agent' {
        description 'Local Planning Authority agent verifying planning applications'
    }
    nrfOperations = actor 'NRF Operations' {
        description 'Nature Restoration Fund operations team managing cases'
    }
    ssclAdmin = actor 'SSCL Finance Admin' {
        description 'Shared Service Centre Limited finance administrator processing invoices'
    }

    govUKNotify = system 'GOV.UK Notify' {
        description 'GOV.UK Notify service for sending email and SMS notifications'
        technology 'GOV.UK Platform as a Service'
        style {
            color secondary
        }
    }

    govUKPay = system 'GOV.UK Pay' {
        description 'GOV.UK Pay service for processing credit card payments under £10,000'
        technology 'GOV.UK Platform as a Service'
        style {
            color secondary
        }
    }

    SOP = system 'Shared Oracle Platform' {
        description 'DEFRA financial ERP system for invoice processing'
        technology 'Oracle Fusion ERP system'
        icon https://icons.terrastruct.com/dev%2Foracle.svg
        style {
            color red
        }
    }

    component sopFTPServer 'SOP FTP Server' {
        description 'FTP server for exchanging invoice and payment data with SOP'
        technology 'AWS Transfer for FTP'
        icon https://icons.terrastruct.com/aws%2FMigration%20&%20Transfer%2FAWS-Transfer-for-FTP_Resource-Icon_light-bg.svg
        style {
            color red
        }
    }

    customerBank = system 'Customer Bank' {
        description 'Customer banking system for paying invoices'
        technology 'Banking system'
        style {
            color red
        }
    }

    payForNRFService = system 'Pay for NRF Service' {
        description 'Complete Nature Restoration Fund service platform for processing planning applications and levy payments'
        style {
            color green
        }

        database postgresDatabase 'PostgreSQL Database' {
            description 'Central database storing planning applications, geospatial data, and assessment results'
        }

        nrfFrontendService = system 'NRF Frontend Service' {
            description 'User-facing web application for submitting planning applications and initiating payments'
            style {
                color green
            }

            microservice nrfFrontendService 'Frontend Service' {
                description 'Frontend application server handling user requests and orchestration'
                technology 'Node.js web service'
                icon https://icons.terrastruct.com/dev%2Fnodejs.svg
            }

            cache frontendRedisCache 'Frontend Redis Cache' {
                description 'Redis cache for session management and application data caching'
            }

            microservice cdpUploaderService 'CDP Uploader Service' {
                description 'Document upload service with virus scanning capabilities'
                technology 'File upload and scanning service'
                style {
                    color indigo
                }
            }

            storage tenantBucket 'Tenant Bucket' {
                description 'Secure storage for verified application documents'
            }

            storage quarantineBucket 'Quarantine Bucket' {
                description 'Temporary storage for documents awaiting virus scan'
            }

            component clamAVScanner 'ClamAV Scanner' {
                description 'Antivirus scanner for uploaded documents'
                technology 'ClamAV antivirus engine'
                style {
                    color indigo
                }
            }

            developer -> nrfFrontendService 'Submits planning application details'
            nrfFrontendService -> frontendRedisCache 'Caches user sessions and form data'
            nrfFrontendService -> cdpUploaderService 'Initiates file upload request'
            cdpUploaderService -> quarantineBucket 'Uploads file to quarantine'
            clamAVScanner -> cdpUploaderService 'Notifies scan outcome'
            cdpUploaderService -> tenantBucket 'Moves clean file to tenant bucket'
            cdpUploaderService -> quarantineBucket 'Deletes infected files'
            nrfFrontendService -> postgresDatabase 'Saves planning application details'
            nrfFrontendService -> impactAssessmentQueue 'Pushes application to queue for processing'
            nrfFrontendService -> govUKPay 'Initiates payment request (credit card < £10k)'
            govUKPay -> developer 'Processes payment via credit card'
        }

        nrfImpactAssessmentService = system 'Impact Assessment Service' {
            description 'Geospatial analysis service calculating NRF levy estimates based on biodiversity impact'
            style {
                color green
            }

            queue impactAssessmentQueue 'Impact Assessment Queue' {
                description 'Queue of planning applications awaiting impact assessment'
            }

            queue impactAssessmentDLQueue 'Impact Assessment DLQ' {
                description 'Dead letter queue for failed assessment messages'
            }

            microservice impactAssessmentWorker 'Impact Assessment Worker' {
                description 'Worker service processing geospatial calculations and generating levy estimates'
                technology 'Python worker service'
                icon https://icons.terrastruct.com/dev%2Fpython.svg
            }

            impactAssessmentWorker -> impactAssessmentQueue 'Polls for new applications'
            impactAssessmentWorker -> impactAssessmentDLQueue 'Sends failed messages to DLQ'
            impactAssessmentWorker -> postgresDatabase 'Reads geospatial and biodiversity data'
            impactAssessmentWorker -> postgresDatabase 'Saves assessment results and levy estimates'
            impactAssessmentWorker -> govUKNotify 'Sends NRF levy estimate notification'
            impactAssessmentWorker -> govUKNotify 'Sends payment request confirmation'
            govUKNotify -> developer 'Delivers levy estimate email'
            govUKNotify -> developer 'Delivers payment confirmation email'
        }

        nrfVerificationService = system 'Verification Service' {
            description 'LPA agent portal for reviewing and verifying planning application details'
            style {
                color green
            }

            microservice verificationService 'Verification Service' {
                description 'Verification portal for Local Planning Authority agents'
                technology 'Node.js web service'
                icon https://icons.terrastruct.com/dev%2Fnodejs.svg
            }

            cache verificationRedisCache 'Verification Redis Cache' {
                description 'Redis cache for session management and verification workflow caching'
            }

            lpaAgent -> verificationService 'Reviews and verifies planning applications'
            verificationService -> verificationRedisCache 'Caches agent sessions and verification data'
            verificationService -> postgresDatabase 'Reads application details for verification'
        }

        nrfInvoiceRequestorService = system 'Invoice Requestor Service' {
            description 'Service generating and submitting invoices to the financial system for payments over £10k'
            style {
                color green
            }

            microservice invoiceRequestorService 'Invoice Requestor Service' {
                description 'Scheduled service for invoice generation and submission'
                technology 'Node.js scheduled service (EventBridge)'
                icon https://icons.terrastruct.com/dev%2Fnodejs.svg
            }

            invoiceRequestorService -> postgresDatabase 'Reads verified application data'
            invoiceRequestorService -> sopFTPServer 'Sends invoice and customer details via FTP'
            sopFTPServer -> SOP 'Transfers data for invoice generation'
            ssclAdmin -> SOP 'Processes and approves invoices'
            SOP -> developer 'Sends invoice for bank transfer payment'
        }

        nrfReconciliationService = system 'Reconciliation Service' {
            description 'Service reconciling bank transfer payments with invoices and completing applications'
            style {
                color green
            }

            microservice invoiceReconciliationService 'Invoice Reconciliation Service' {
                description 'Scheduled service for payment reconciliation and application completion'
                technology 'Node.js scheduled service (EventBridge)'
                icon https://icons.terrastruct.com/dev%2Fnodejs.svg
            }

            developer -> customerBank 'Pays invoice via bank transfer (> £10k)'
            SOP -> customerBank 'Retrieves bank statements'
            SOP -> sopFTPServer 'Exports transaction report via FTP'
            invoiceReconciliationService -> sopFTPServer 'Retrieves transaction report'
            invoiceReconciliationService -> postgresDatabase 'Saves reconciliation results'
            invoiceReconciliationService -> postgresDatabase 'Updates application status to Completed'
            invoiceReconciliationService -> govUKNotify 'Sends payment confirmation'
            govUKNotify -> developer 'Delivers payment confirmation email'
        }

        nrfCaseManagementService = system 'Case Management Service' {
            description 'Operations portal for managing NRF cases, disputes, and exceptions'
            style {
                color green
            }

            microservice caseManagementService 'Case Management Service' {
                description 'Case management portal for NRF operations team'
                technology 'Node.js web service'
                icon https://icons.terrastruct.com/dev%2Fnodejs.svg
            }

            cache caseManagementRedisCache 'Case Management Redis Cache' {
                description 'Redis cache for session management and case data caching'
            }

            nrfOperations -> caseManagementService 'Manages cases, disputes, and exceptions'
            caseManagementService -> caseManagementRedisCache 'Caches operator sessions and case data'
            caseManagementService -> postgresDatabase 'Reads application and case data'
            caseManagementService -> postgresDatabase 'Updates case management records'
            caseManagementService -> govUKNotify 'Sends case notifications'
            govUKNotify -> developer 'Delivers case update emails'
        }
    }
}

views {
    view index {
        title 'NRF Complete System Overview'
        description 'Complete system architecture showing all services, actors, and integrations'
        include *
    }

    view frontendService {
        title 'NRF Frontend Service'
        description 'Developer-facing service for application submission, file upload, and payment initiation'
        include developer, nrfFrontendService.*, postgresDatabase, nrfImpactAssessmentService.impactAssessmentQueue, govUKPay
    }

    view impactAssessmentService {
        title 'NRF Impact Assessment Service'
        description 'Geospatial analysis and levy calculation service with notification workflow'
        include nrfImpactAssessmentService.*, nrfFrontendService.nrfFrontendService, postgresDatabase, govUKNotify, developer
    }

    view verificationService {
        title 'NRF Verification Service'
        description 'LPA agent portal for application verification and approval'
        include lpaAgent, nrfVerificationService.*, postgresDatabase
    }

    view invoiceRequestorService {
        title 'NRF Invoice Requestor Service'
        description 'Invoice generation and submission to financial system for large payments'
        include nrfInvoiceRequestorService.*, postgresDatabase, sopFTPServer, SOP, ssclAdmin, developer
    }

    view invoiceReconciliationService {
        title 'NRF Invoice Reconciliation Service'
        description 'Bank payment reconciliation and application completion workflow'
        include nrfReconciliationService.*, postgresDatabase, sopFTPServer, SOP, developer, customerBank, govUKNotify
    }

    view caseManagementService {
        title 'NRF Case Management Service'
        description 'Operations portal for managing cases, disputes, and exceptions'
        include nrfCaseManagementService.*, nrfOperations, postgresDatabase, govUKNotify, developer
    }
}
